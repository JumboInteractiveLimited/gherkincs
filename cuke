#!/usr/bin/env php
<?php
/**
 * Cuke - Coding Standard Checker and Semantic Analyzer for Gherkin
 *
 * @copyright 2013 Instaclick Inc.
 *
 * @author Juti Noppornpitak <jnopporn@shiroyuki.com>
 */

require_once 'vendor/autoload.php';

$basePath = dirname(__FILE__);

use IC\Gherkinics\AnalyzerManager;
use IC\Gherkinics\Analyzer;
use IC\Gherkinics\Core;
use IC\Gherkinics\Lexer;
use IC\Gherkinics\Util\Output;
use IC\Gherkinics\Printer;

/**
 * Check if the flag is given
 *
 * @param string $flagName     the flag name
 * @param array  $argumentList the list of arguments
 *
 * @return boolean
 */
function hasFlag($flagName, array $argumentList)
{
    return in_array('--' . $flagName, $argumentList);
}

/**
 * Retrieve the flag index
 *
 * @param string $flagName     the flag name
 * @param array  $argumentList the list of arguments
 *
 * @return string|null
 */
function getFlagIndex($flagName, array $argumentList)
{
    return hasFlag($flagName, $argumentList) ? array_search('--' . $flagName, $argumentList) : null;
}

/**
 * Retrieve the flag value
 *
 * @param string  $flagName     the flag name
 * @param array   $argumentList the list of arguments
 * @param integer $flagIndex    the flag index
 *
 * @return boolean
 */
function getFlagFilePathValue($flagName, array $argumentList, $flagIndex)
{
    $value = $argumentList[$flagIndex + 1];

    // Detect the absolute path (UNIX only).
    if ( ! preg_match('/^\//', $value)) {
        $value = getcwd() . '/' . $value;
    }

    return $value;
}

/**
 * Main
 *
 * @param array $argumentList the argument list
 */
function main($argumentList)
{
    global $basePath;

    static $validOutputOptionList = array(
        'jcs', // Jenkins Checkstyle
        'html', // HTML
    );

    $output         = new Output();
    $manager        = new AnalyzerManager();
    $cuke           = new Core();
    $argumentLength = count($argumentList);

    if ($argumentLength < 2) {
        $output->writeln('USAGE: cuke [--jcs /path/for/report] [--html /path/to/directory/for/report] /path/to/config_file /path/pattern/to/scan');

        exit(1);
    }

    $configPath = $argumentList[$argumentLength - 2];
    $targetPath = $argumentList[$argumentLength - 1];
    $optionMap  = array();

    // Parse the arguments
    foreach ($validOutputOptionList as $name) {
        if ( ! hasFlag($name, $argumentList)) {
            continue;
        }

        $index = getFlagIndex($name, $argumentList);
        $value = getFlagFilePathValue($name, $argumentList, $index);

        $optionMap[$name] = $value;
    }

    // Set up the analyzer manager.
    $manager->setLexer(new Lexer());

    $config = simplexml_load_file($configPath);

    if ( ! isset($config->analyzers)) {
        $output->writeln('Notice: the configuration file is invalid.');

        exit(1);
    }

    if ( ! isset($config->analyzers->analyzer)) {
        $output->writeln('Terminated due to that no analyzers are found.');

        exit(1);
    }

    foreach ($config->analyzers->analyzer as $analyzer) {
        $analyzerClass = '\\'.$analyzer['class'];
        $output->write('       Registering analyzer: ' . $analyzerClass);
        $manager->registerAnalyzer(new $analyzerClass());
        $output->writeln("\r[DONE]");
    }

    // Set up the core object.
    $cuke->setBasePath($targetPath);
    $cuke->setAnalyzerManager($manager);

    $output->writeln(PHP_EOL . 'Analyzing feature files...');

    $pathToFeedbackMap = $cuke->scan(is_dir($targetPath) ? $targetPath . '/*' : $targetPath);

    $output->writeln('');

    // Prepare the printer.
    $printer = null;

    switch (true) {
        case isset($optionMap['html']):
            $printer = new Printer\HtmlPrinter(
                $basePath . '/view', // template pool
                $basePath . '/static', // static pool
                $optionMap['html'],
                $targetPath
            );

            break;
        case isset($optionMap['jcs']):
            $printer = new Printer\JenkinsReportPrinter(
                $basePath . '/view', // template pool
                $optionMap['jcs'],
                $targetPath
            );

            break;
        default:
            $printer = new Printer\TerminalPrinter($output, $basePath);
    }

    $printer->doPrint($pathToFeedbackMap);

    $output->writeln('Analysis complete.');
    $output->writeln(PHP_EOL . 'Please note that this tool only detects classic errors.');
    $output->writeln('Bye bye!');

    if (count($pathToFeedbackMap) > 0) {
        exit(1);
    }
}

main(array_slice($argv, 1));
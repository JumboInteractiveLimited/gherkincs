<!doctype html>
<html>
<head>
    {% include '_header.html.twig' %}
    <title>{{ dataMap.directory }}/{{ dataMap.name }} - Gherkinics Report</title>
    <link rel="stylesheet" href="static/css/file_feedback.css"/>
</head>
<body>
<article class="container-fluid">
    <header class="btn-group">
        <a href="index.html" title="Summary" class="btn"><i class="icon-arrow-left"></i> Summary</a>
        <button type="button" id="view-mode" class="btn">Show</button>
        <a href="#top" title="Go to the top" class="btn"><i class="icon-arrow-up"></i></a>
    </header>
    <h1><small>{{ dataMap.directory }}</small>{{ dataMap.name }}</h1>
    {# Per-file #}
    {% set tokenFeedback = feedbackMap.get(0) %}

    {% if tokenFeedback %}
        <article class="file notes">
            <h2>
                {{ tokenFeedback.count }}
                <small>
                    violation{% if tokenFeedback.count != 1 %}s{% endif %}
                    for this file
                </small>
            </h2>
            <ul>
                {% for violation in tokenFeedback.all %}
                    <li>{{ violation }}</li>
                {% endfor %}
            </ul>
        </article>
    {% endif %}
    <div class="code">
        {# Per-line feedback #}
        {% for token in feedbackMap.tokenList %}
            {% set tokenFeedback = feedbackMap.get(token.id) %}

            <div class="line {% if tokenFeedback %}warning{% endif %}" style="" data-type="{{ token.className | lower }}">
                <div class="line-no">{{ token.id }}</div>
                <div class="token {% if not tokenFeedback %}ignored{% endif %}">{{ token.rawContent }}</div>

                {% if tokenFeedback %}
                    <article class="notes">
                        <h2>
                            {{ tokenFeedback.count }}
                            <small>violation{% if tokenFeedback.count != 1 %}s{% endif %}</small>
                        </h2>
                        <ul>
                            {% for violation in tokenFeedback.all %}
                                <li>{{ violation }}</li>
                            {% endfor %}
                        </ul>
                    </article>
                {% endif %}
            </div>
        {% endfor %}
    </div>
</article>
<script>
window.onload = function () {
    'use strict';
    var tokenList = document.getElementsByClassName('token'),
        whitespaceEntity = '&nbsp;',
        token,
        type,
        i,
        l,
        line;

    for (i = 0, l = tokenList.length; i < l; i++) {
        token = tokenList[i];
        type  = token.parentNode.getAttribute('data-type');

        // Apply syntax highlighting
        line = String(token.innerHTML);

        // Prepare extra highlighting
        if (type !== 'tabulardata') {
            line = line.replace(
                new RegExp('([^\\\s])(\\\s{2,})([^\\\s])', 'g'),
                '$1__ews_begin__$2__ews_end__$3'
            );
        }

        // Trailing spaces
        line = line.replace(
            new RegExp('(\\\s+)$'),
            '__tsp_begin__$1__tsp_end__'
        );
        
        // Leading spaces
        line = line.replace(
            new RegExp('^(\\\s+)'),
            '__lsp_begin__$1__lsp_end__'
        );

        // Normal highlighting
        line = line.replace(
            new RegExp(' ', 'g'),
            whitespaceEntity
        );
        line = line.replace(
            new RegExp('"([^\"]*)"', 'g'),
            '<span class="syntax quote">"$1"</span>'
        );
        line = line.replace(
            new RegExp('\'([^\']*)\'', 'g'),
            '<span class="syntax quote">\'$1\'</span>'
        );
        line = line.replace(
            new RegExp('\t', 'g'),
            '<span class="tab">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>'
        );
        line = line.replace(
            new RegExp('(#.*)'),
            '<span class="syntax comment">$1</span>'
        );
        line = line.replace(
            new RegExp('(Feature):'),
            '<span class="syntax feature">$1:</span>'
        );
        line = line.replace(
            new RegExp('(Background|Scenario|Scenario Outline):'),
            '<span class="syntax scenario">$1:</span>'
        );
        line = line.replace(
            new RegExp('(And|Given|Then|When)'),
            '<span class="syntax step">$1</span>'
        );

        // Apply extra highlighting.
        line = line.replace(
            new RegExp('__ews_begin__(.+)__ews_end__', 'g'),
            '<span class="syntax extra-spaces">$1</span>'
        );
        line = line.replace(
            new RegExp('__tsp_begin__(.+)__tsp_end__$', 'g'),
            '<span class="syntax extra-spaces">$1</span>'
        );
        line = line.replace(
            new RegExp('__lsp_begin__(.+)__lsp_end__'),
            '<span class="syntax leading-spaces">$1</span>'
        );
        line = line.replace(
            new RegExp(whitespaceEntity, 'g'),
            '<span class="syntax space">' + whitespaceEntity + '</span>'
        );

        token.innerHTML = line;
    }

    // Add the event listener to the view toggler
    document
        .getElementById('view-mode')
        .addEventListener('click', function (e) {
            var doDeactivate = (e.target.getAttribute('class').match('active'));

            e.preventDefault();

            e.target.setAttribute('class', doDeactivate ? 'btn' : 'btn active');

            for (i = 0, l = tokenList.length; i < l; i++) {
                token = tokenList[i];

                if (doDeactivate) {
                    token.parentNode.setAttribute('style', '');

                    continue;
                }

                token.parentNode.setAttribute(
                    'style',
                    (String(token.getAttribute('class')).match(new RegExp('ignored')))
                        ? 'display: none;'
                        : ''
                );
            }
        });
};
</script>
</body>
</html>
